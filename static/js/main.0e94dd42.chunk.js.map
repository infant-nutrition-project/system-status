{"version":3,"sources":["components/HeaderComponent.jsx","api/DataService.js","api/ApiConfig.js","components/SystemStatusComponent.jsx","components/SystemStatusApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","className","href","Component","secret","axios","get","replace","JOB1_INIT_DATA","JOB2_INIT_DATA","SystemStatusComponent","props","state","isSecretWrong","showSystemStatusData","job1Data","job2Data","validate","bind","onSubmit","values","errors","trim","DataService","systemStatusData","then","response","setState","data","job1","Timestamp","Result","job2","filter","entry","status","length","catch","e","console","log","this","job1Timestamp","job1DailyCount","DailyCount","job1CumulativeCount","CumulativeCount","job2Timestamp","job2ErrorCount","ErrorCount","Data","initialValues","enableReinitialize","validateOnChange","validateOnBlur","name","component","type","map","daily","_id","total","user","cumulative_count","JSON","stringify","info","App","SystemStatusApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e94dd42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass HeaderComponent extends Component {\n    render() {\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div>\n                        <a href=\"/\" className=\"navbar-brand\">DIAPER System Status</a>\n                    </div>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent;","import axios from \"axios\";\nimport { SYSTEM_STATUS_API } from \"./ApiConfig\";\n\nclass DataService {\n    systemStatusData(secret) {\n        return axios.get(SYSTEM_STATUS_API.replace(\"SECRET\", secret))\n    }\n}\n\nexport default new DataService();","// Real APIs\nexport const SYSTEM_STATUS_API = `https://SECRET.execute-api.us-east-1.amazonaws.com/default/getMonitorResults`;\n\n// // Dummy APIs\n// export const SYSTEM_STATUS_API = `https://run.mocky.io/v3/806ee366-1684-475b-aec3-1bf2094c8d35`;\n// // secret token: system-status-secret-token-yueteng","import React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport DataService from \"../api/DataService\";\n\nconst JOB1_INIT_DATA = {\n    \"Timestamp\": null,\n    \"DailyCount\": [],\n    \"CumulativeCount\": []\n}\n\nconst JOB2_INIT_DATA = {\n    \"Timestamp\": null,\n    \"ErrorCount\": 0,\n    \"Data\": []\n}\n\nclass SystemStatusComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            secret: \"\",\n            isSecretWrong: false,\n            showSystemStatusData: false,\n            job1Data: JOB1_INIT_DATA,\n            job2Data: JOB2_INIT_DATA\n        };\n        this.validate = this.validate.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    validate(values) {\n        let errors = {};\n        if (values.secret === \"\" || values.secret.trim() === \"\") { errors.secret = \"Must enter secret string\"; }\n        return errors;\n    }\n\n    onSubmit(values) {\n        DataService.systemStatusData(values.secret)\n            .then(response => {\n                // console.log(response);\n                this.setState({\n                    isSecretWrong: false,\n                    showSystemStatusData: true,\n                    job1Data: {\n                        \"Timestamp\": response.data.job1.Timestamp,\n                        \"DailyCount\": response.data.job1.Result[0],\n                        \"CumulativeCount\": response.data.job1.Result[1]\n                    },\n                    job2Data: {\n                        \"Timestamp\": response.data.job2.Timestamp,\n                        \"ErrorCount\": response.data.job2.Result.filter(entry => entry.status === \"ERROR\").length,\n                        \"Data\": response.data.job2.Result\n                    }\n                });\n            })\n            .catch(e => {\n                console.log(e);\n                this.setState({\n                    isSecretWrong: true,\n                    showSystemStatusData: false,\n                    job1Data: JOB1_INIT_DATA,\n                    job2Data: JOB2_INIT_DATA\n                })\n            })\n    }\n\n    render() {\n        let secret = this.state.secret;\n\n        let job1Timestamp = this.state.job1Data.Timestamp;\n        let job1DailyCount = this.state.job1Data.DailyCount;\n        let job1CumulativeCount = this.state.job1Data.CumulativeCount;\n\n        let job2Timestamp = this.state.job2Data.Timestamp;\n        let job2ErrorCount = this.state.job2Data.ErrorCount;\n        let job2Data = this.state.job2Data.Data;\n        return (\n            <>\n                <h4>Secret Key</h4>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ secret }}\n                        enableReinitialize={true}\n                        onSubmit={this.onSubmit}\n                        validate={this.validate}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"secret\" component=\"div\" className=\"alert alert-warning\" />\n                                    {this.state.isSecretWrong && <div className=\"alert alert-danger\">Secret INCORRECT. Please retry</div>}\n                                    <fieldset className=\"form-group\">\n                                        <label>If you do not know the secret key, please contact Liz.</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"secret\" />\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Submit</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n\n                {this.state.showSystemStatusData && <>\n                    <hr />\n                    <div className=\"container\">\n                        <h3> Job 1 </h3>\n                        <h4> Timestamp (UTC Time): {job1Timestamp} </h4>\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <b>Daily Count</b>\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>Date</th>\n                                            <th>Count</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            job1DailyCount.map(\n                                                (daily) =>\n                                                    <tr key={daily._id}>\n                                                        <td>{daily._id}</td>\n                                                        <td>{daily.total}</td>\n                                                    </tr>\n                                            )\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n\n                            <div className=\"col\">\n                                <b>Cumulative Count</b>\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>User</th>\n                                            <th>Cumulative count</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            job1CumulativeCount.map(\n                                                (user) =>\n                                                    <tr key={user._id}>\n                                                        <td>{user._id}</td>\n                                                        <td>{user.cumulative_count}</td>\n                                                    </tr>\n                                            )\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                    <hr />\n\n                    <div className=\"container\">\n                        <h3>Job 2</h3>\n                        <h4> Timestamp (UTC Time): {job2Timestamp}</h4>\n                        <b>{job2ErrorCount === 0 && <p className=\"text-success\">All status OK</p>}</b>\n                        <b>{job2ErrorCount > 0 && <p className=\"text-warning bg-dark\">WARNING: {job2ErrorCount} error(s) detected</p>}</b>\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Status</th>\n                                    <th>Info</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    job2Data.map(\n                                        (entry) =>\n                                            <tr key={entry.name}>\n                                                <td>{entry.name}</td>\n                                                <td>{entry.status}</td>\n                                                <td>{JSON.stringify(entry.info)}</td>\n                                            </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </>}\n            </>\n        )\n    }\n}\n\nexport default SystemStatusComponent;","import React, { Component } from \"react\";\nimport HeaderComponent from \"./HeaderComponent\";\nimport SystemStatusComponent from \"./SystemStatusComponent\";\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <HeaderComponent />\n                <SystemStatusComponent />\n            </>\n        )\n    }\n}\n\nexport default App;","// import logo from './logo.svg';\nimport './App.css';\nimport \"./bootstrap.css\";\nimport SystemStatusApp from \"./components/SystemStatusApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SystemStatusApp />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}